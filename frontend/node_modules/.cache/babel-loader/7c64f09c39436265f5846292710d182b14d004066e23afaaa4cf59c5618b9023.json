{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\dev\\\\mesto-react\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { Header } from './Header';\nimport { Main } from './Main';\nimport { Footer } from './Footer';\nimport { PopupProfileEdit } from './PopupProfileEdit';\nimport { PopupCardsAdd } from './PopupCardsAdd';\nimport { PopupEditAvatar } from './PopupEditAvatar';\nimport { ImagePopup } from './ImagePopup';\nimport { PopupRemoveCard } from './PopupRemoveCard';\nimport { api } from './utils/Api';\nimport { CurrentUserContext } from '../context/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isEditProfileOpen, setIsEditProfileOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  const [selectedCard, setSelectedCard] = useState({});\n  const [currentUser, setCurrentUser] = useState('');\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    Promise.all([api.getUserInfo(), api.getCards()]).then(_ref => {\n      let [userInfo, initialCards] = _ref;\n      setCurrentUser(userInfo);\n      setCards(initialCards);\n    }).catch(err => {\n      console.error(err);\n    });\n  }, []);\n  function handleEditProfileCLick() {\n    setIsEditProfileOpen(true);\n  }\n  function handleAddCardClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  function handleAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  function handleCardClick(_ref2) {\n    let {\n      name,\n      link\n    } = _ref2;\n    setSelectedCard({\n      name,\n      link\n    });\n  }\n  function closeAllPopups() {\n    setIsEditProfileOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard({});\n  }\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    const method = isLiked ? 'DELETE' : 'PUT';\n    api.updateLike(card._id, method);\n\n    // // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.updateLike(card._id, method).then(newCard => {\n      setCards(state => state.map(c => c._id === card._id ? newCard : c));\n    });\n\n    // api.updateLikeState(card._id, !isLiked).then((newCard) => {\n    //   setCards((state) => state.map((c) => (c._id === card._id ? newCard : c)));\n    // });\n    // console.log(card);\n    console.log(card._id);\n    console.log(isLiked);\n    console.log(method);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n      value: currentUser,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {\n          onEditAvatar: handleAvatarClick,\n          onEditProfile: handleEditProfileCLick,\n          onAddPlace: handleAddCardClick,\n          onCardClick: handleCardClick,\n          onClose: closeAllPopups,\n          onCardLike: handleCardLike,\n          cards: cards,\n          currentUser: currentUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PopupProfileEdit, {\n          isOpened: isEditProfileOpen,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PopupCardsAdd, {\n          isOpened: isAddPlacePopupOpen,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PopupEditAvatar, {\n          isOpened: isEditAvatarPopupOpen,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PopupRemoveCard, {\n          isOpened: ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(ImagePopup, {\n          card: selectedCard,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"qm1kobsUvqcjBtIInjyWneHYfFk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Header","Main","Footer","PopupProfileEdit","PopupCardsAdd","PopupEditAvatar","ImagePopup","PopupRemoveCard","api","CurrentUserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isEditProfileOpen","setIsEditProfileOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","currentUser","setCurrentUser","cards","setCards","Promise","all","getUserInfo","getCards","then","_ref","userInfo","initialCards","catch","err","console","error","handleEditProfileCLick","handleAddCardClick","handleAvatarClick","handleCardClick","_ref2","name","link","closeAllPopups","handleCardLike","card","isLiked","likes","some","i","_id","method","updateLike","newCard","state","map","c","log","children","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","onEditAvatar","onEditProfile","onAddPlace","onCardClick","onClose","onCardLike","isOpened","_c","$RefreshReg$"],"sources":["C:/Users/1/dev/mesto-react/src/components/App.js"],"sourcesContent":["// import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Header } from './Header';\r\nimport { Main } from './Main';\r\nimport { Footer } from './Footer';\r\nimport { PopupProfileEdit } from './PopupProfileEdit';\r\nimport { PopupCardsAdd } from './PopupCardsAdd';\r\nimport { PopupEditAvatar } from './PopupEditAvatar';\r\nimport { ImagePopup } from './ImagePopup';\r\nimport { PopupRemoveCard } from './PopupRemoveCard';\r\nimport { api } from './utils/Api';\r\nimport { CurrentUserContext } from '../context/CurrentUserContext';\r\n\r\nfunction App() {\r\n  const [isEditProfileOpen, setIsEditProfileOpen] = useState(false);\r\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\r\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState({});\r\n  const [currentUser, setCurrentUser] = useState('');\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    Promise.all([api.getUserInfo(), api.getCards()])\r\n      .then(([userInfo, initialCards]) => {\r\n        setCurrentUser(userInfo);\r\n\r\n        setCards(initialCards);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }, []);\r\n\r\n  function handleEditProfileCLick() {\r\n    setIsEditProfileOpen(true);\r\n  }\r\n\r\n  function handleAddCardClick() {\r\n    setIsAddPlacePopupOpen(true);\r\n  }\r\n\r\n  function handleAvatarClick() {\r\n    setIsEditAvatarPopupOpen(true);\r\n  }\r\n\r\n  function handleCardClick({ name, link }) {\r\n    setSelectedCard({ name, link });\r\n  }\r\n\r\n  function closeAllPopups() {\r\n    setIsEditProfileOpen(false);\r\n    setIsAddPlacePopupOpen(false);\r\n    setIsEditAvatarPopupOpen(false);\r\n    setSelectedCard({});\r\n  }\r\n\r\n  function handleCardLike(card) {\r\n    // Снова проверяем, есть ли уже лайк на этой карточке\r\n    const isLiked = card.likes.some((i) => i._id === currentUser._id);\r\n    const method = isLiked ? 'DELETE' : 'PUT';\r\n\r\n    api.updateLike(card._id, method);\r\n\r\n    // // Отправляем запрос в API и получаем обновлённые данные карточки\r\n    api.updateLike(card._id, method).then((newCard) => {\r\n      setCards((state) => state.map((c) => (c._id === card._id ? newCard : c)));\r\n    });\r\n\r\n    // api.updateLikeState(card._id, !isLiked).then((newCard) => {\r\n    //   setCards((state) => state.map((c) => (c._id === card._id ? newCard : c)));\r\n    // });\r\n    // console.log(card);\r\n    console.log(card._id);\r\n    console.log(isLiked);\r\n    console.log(method);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CurrentUserContext.Provider value={currentUser}>\r\n        <div className=\"page\">\r\n          <Header />\r\n          <Main\r\n            onEditAvatar={handleAvatarClick}\r\n            onEditProfile={handleEditProfileCLick}\r\n            onAddPlace={handleAddCardClick}\r\n            onCardClick={handleCardClick}\r\n            onClose={closeAllPopups}\r\n            onCardLike={handleCardLike}\r\n            cards={cards}\r\n            currentUser={currentUser}\r\n          />\r\n          <Footer />\r\n          <PopupProfileEdit isOpened={isEditProfileOpen} onClose={closeAllPopups} />\r\n          <PopupCardsAdd isOpened={isAddPlacePopupOpen} onClose={closeAllPopups} />\r\n          <PopupEditAvatar isOpened={isEditAvatarPopupOpen} onClose={closeAllPopups} />\r\n          <PopupRemoveCard isOpened={''} /> {/*-------------------*/}\r\n          <ImagePopup card={selectedCard} onClose={closeAllPopups} />\r\n        </div>\r\n      </CurrentUserContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}