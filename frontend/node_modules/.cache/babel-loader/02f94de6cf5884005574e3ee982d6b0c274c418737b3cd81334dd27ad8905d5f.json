{"ast":null,"code":"class Api {\n  constructor(path, token) {\n    this._basePath = path;\n    this._authToken = token;\n  }\n  _request(path, method, body) {\n    return fetch(`${this._basePath}/${path}`, {\n      method: method,\n      headers: {\n        authorization: this._authToken,\n        'Content-Type': 'application/json'\n      },\n      body: body\n    }).then(this._checkStatus);\n  }\n  _checkStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n  getCards() {\n    return this._request('cards', 'GET');\n  }\n  getUserInfo() {\n    return this._request('users/me', 'GET');\n  }\n  getUserId() {\n    Promise(this.getUserInfo()).then(res => {\n      return res._id;\n    });\n  }\n  updateUserInfo(data) {\n    return this._request('users/me', 'PATCH', JSON.stringify({\n      name: data.name,\n      about: data.about\n    }));\n  }\n  addNewCard(formValues) {\n    return this._request('/cards', 'POST', JSON.stringify({\n      name: formValues.name,\n      link: formValues.link\n    }));\n  }\n  updateAvatar(link) {\n    return this._request('users/me/avatar', 'PATCH', JSON.stringify({\n      avatar: link\n    }));\n  }\n  deleteCard(cardId) {\n    return this._request(`cards/${cardId}`, 'DELETE');\n  }\n  updateLike(cardId, method) {\n    return this._request(`cards/${cardId}/likes`, method);\n  }\n  updateLikeState(cardId, isLiked) {\n    return this._request(`/cards/${cardId}/likes`, {\n      method: `${isLiked ? 'DELETE' : 'PUT'}`\n    });\n  }\n}\nconst api = new Api('https://mesto.nomoreparties.co/v1/cohort-59', '3a99dc75-7908-4d48-95a2-7baec3f5e64d');\nexport { api };","map":{"version":3,"names":["Api","constructor","path","token","_basePath","_authToken","_request","method","body","fetch","headers","authorization","then","_checkStatus","res","ok","json","Promise","reject","status","getCards","getUserInfo","getUserId","_id","updateUserInfo","data","JSON","stringify","name","about","addNewCard","formValues","link","updateAvatar","avatar","deleteCard","cardId","updateLike","updateLikeState","isLiked","api"],"sources":["C:/Users/1/dev/mesto-react/src/components/utils/Api.js"],"sourcesContent":["class Api {\r\n  constructor(path, token) {\r\n    this._basePath = path;\r\n    this._authToken = token;\r\n  }\r\n\r\n  _request(path, method, body) {\r\n    return fetch(`${this._basePath}/${path}`, {\r\n      method: method,\r\n      headers: {\r\n        authorization: this._authToken,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: body,\r\n    }).then(this._checkStatus);\r\n  }\r\n\r\n  _checkStatus(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n\r\n    return Promise.reject(`Error: ${res.status}`);\r\n  }\r\n\r\n  getCards() {\r\n    return this._request('cards', 'GET');\r\n  }\r\n\r\n  getUserInfo() {\r\n    return this._request('users/me', 'GET');\r\n  }\r\n\r\n  getUserId() {\r\n    Promise(this.getUserInfo()).then((res) => {\r\n      return res._id;\r\n    });\r\n  }\r\n\r\n  updateUserInfo(data) {\r\n    return this._request(\r\n      'users/me',\r\n      'PATCH',\r\n      JSON.stringify({\r\n        name: data.name,\r\n        about: data.about,\r\n      })\r\n    );\r\n  }\r\n\r\n  addNewCard(formValues) {\r\n    return this._request(\r\n      '/cards',\r\n      'POST',\r\n      JSON.stringify({\r\n        name: formValues.name,\r\n        link: formValues.link,\r\n      })\r\n    );\r\n  }\r\n\r\n  updateAvatar(link) {\r\n    return this._request(\r\n      'users/me/avatar',\r\n      'PATCH',\r\n      JSON.stringify({\r\n        avatar: link,\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteCard(cardId) {\r\n    return this._request(`cards/${cardId}`, 'DELETE');\r\n  }\r\n\r\n  updateLike(cardId, method) {\r\n    return this._request(`cards/${cardId}/likes`, method);\r\n  }\r\n\r\n  updateLikeState(cardId, isLiked) {\r\n    return this._request(`/cards/${cardId}/likes`, {\r\n      method: `${isLiked ? 'DELETE' : 'PUT'}`,\r\n    });\r\n  }\r\n}\r\n\r\nconst api = new Api('https://mesto.nomoreparties.co/v1/cohort-59', '3a99dc75-7908-4d48-95a2-7baec3f5e64d');\r\n\r\nexport { api };\r\n"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACvB,IAAI,CAACC,SAAS,GAAGF,IAAI;IACrB,IAAI,CAACG,UAAU,GAAGF,KAAK;EACzB;EAEAG,QAAQA,CAACJ,IAAI,EAAEK,MAAM,EAAEC,IAAI,EAAE;IAC3B,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACL,SAAU,IAAGF,IAAK,EAAC,EAAE;MACxCK,MAAM,EAAEA,MAAM;MACdG,OAAO,EAAE;QACPC,aAAa,EAAE,IAAI,CAACN,UAAU;QAC9B,cAAc,EAAE;MAClB,CAAC;MACDG,IAAI,EAAEA;IACR,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC;EAC5B;EAEAA,YAAYA,CAACC,GAAG,EAAE;IAChB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB;IAEA,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAC/C;EAEAC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACd,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC;EACtC;EAEAe,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACf,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC;EACzC;EAEAgB,SAASA,CAAA,EAAG;IACVL,OAAO,CAAC,IAAI,CAACI,WAAW,EAAE,CAAC,CAACT,IAAI,CAAEE,GAAG,IAAK;MACxC,OAAOA,GAAG,CAACS,GAAG;IAChB,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAACC,IAAI,EAAE;IACnB,OAAO,IAAI,CAACnB,QAAQ,CAClB,UAAU,EACV,OAAO,EACPoB,IAAI,CAACC,SAAS,CAAC;MACbC,IAAI,EAAEH,IAAI,CAACG,IAAI;MACfC,KAAK,EAAEJ,IAAI,CAACI;IACd,CAAC,CAAC,CACH;EACH;EAEAC,UAAUA,CAACC,UAAU,EAAE;IACrB,OAAO,IAAI,CAACzB,QAAQ,CAClB,QAAQ,EACR,MAAM,EACNoB,IAAI,CAACC,SAAS,CAAC;MACbC,IAAI,EAAEG,UAAU,CAACH,IAAI;MACrBI,IAAI,EAAED,UAAU,CAACC;IACnB,CAAC,CAAC,CACH;EACH;EAEAC,YAAYA,CAACD,IAAI,EAAE;IACjB,OAAO,IAAI,CAAC1B,QAAQ,CAClB,iBAAiB,EACjB,OAAO,EACPoB,IAAI,CAACC,SAAS,CAAC;MACbO,MAAM,EAAEF;IACV,CAAC,CAAC,CACH;EACH;EAEAG,UAAUA,CAACC,MAAM,EAAE;IACjB,OAAO,IAAI,CAAC9B,QAAQ,CAAE,SAAQ8B,MAAO,EAAC,EAAE,QAAQ,CAAC;EACnD;EAEAC,UAAUA,CAACD,MAAM,EAAE7B,MAAM,EAAE;IACzB,OAAO,IAAI,CAACD,QAAQ,CAAE,SAAQ8B,MAAO,QAAO,EAAE7B,MAAM,CAAC;EACvD;EAEA+B,eAAeA,CAACF,MAAM,EAAEG,OAAO,EAAE;IAC/B,OAAO,IAAI,CAACjC,QAAQ,CAAE,UAAS8B,MAAO,QAAO,EAAE;MAC7C7B,MAAM,EAAG,GAAEgC,OAAO,GAAG,QAAQ,GAAG,KAAM;IACxC,CAAC,CAAC;EACJ;AACF;AAEA,MAAMC,GAAG,GAAG,IAAIxC,GAAG,CAAC,6CAA6C,EAAE,sCAAsC,CAAC;AAE1G,SAASwC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}